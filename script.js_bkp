/**
*
* @Class Model
* Model for simple CRUD of todo list
*
**/

class Model {
	constructor(){
		this.todos = JSON.parse(localStorage.getItem('todo')) || [];
	}
	
	// Append a todo to the todos array
	addTodo(todo){
		this.todos = [...this.todos, todo];

		this.onTodoListChanged(this.todos);
	}
	
	//Mapp all todos, and replace the text of the todo with the given id
	editTodo(id, updatedText){
		this.todos = this.todos.map(todo =>
			todo.id == id ? {id:todo.id, text:updatedText, complete:todo.complete}:todo)
	}

	// Delete todo by id
	deleteTodo(id){
		this.todos = this.todos.filter(todo => todo.id !== id)
	}

	toggleTodo(id){
		this.todos = this.todos.map(todo =>
			todo.id === id ? {id:todo.id, text:todo.text, complete: ! todo.complete} : todo
		)
	}
	bindEvents(controller) {
		this.onTodoListChanged = controller.onTodoListChanged;
	}

}

/**
*
* @class View
*
* Visual representation of model class
*
**/

class View {
	constructor() {
		
		this.app = this.getElement('#root');
		this.title = this.createElement('h1');
		this.title.textContent = 'Todo List';
		
		this.form = this.createElement('form');
		this.input = this.createElement('input');
		this.input.type = 'text';
		this.input.placeHolder = 'Add todo';
		this.input.name = 'todo';

		this.submitButton = this.createElement('button');
		this.submitButton.textContent = 'Submit';
		
		this.form.append(this.input, this.submitButton);

		this.app.append(this.title, this.form, this.todoList)
	}
	get todoText(){
		return this.input.value;
		
	}
	resetInput(){
		this.input.value = ' ';
	}
	
	displayedTodos(){
		
		while (this.todoList.firstChild){
			this.todoList.removeChild(this.todoList.firstChild);
		}
		
		if(todo.lenght === 0){
			const p = this.createElement('p');

			p.textContent = 'Empty todo list? Add a task!'
			this.todoList.append(p)
		}else {
			todos.forEach(todo => {
				const li = this.createElement('li');
				li.id = todo.id;

				const checkbox = this.createElement('input');
				checkbox.type = 'checkbox';
				checkbox.checked = todo.complete;

				const span = this.createElement('span');
				span.contenEditable = true;
				span.classList.add('editable');

				if(todo.complete){
		
					const strike = this.createElement('s');
					strike.textContent = todo.text;
					span.append(strike);
				}else{
					span.textContent = todo.text;
				}

				const deleteButton = this.createElement('button', 'delete');
				deleteButton.textContent = 'Delete';
				li.append(checkbox, span, deleteButton);

				this.todoList.append(li);
			});
		}
	}
	
	// Create an element with optional CSS
	createElement(tag, className) {
		
		const element = document.createElement(tag);
		
		if (className){
			
			element.classList.add(className);
			return element;
		}
	}

	// Get an element from the DOM
	getElement(selector) {
		const element = document.querySelector(selector);
		return element;
	}
	bindEvents(controller) {
		this.form.addEventListener('submit', controller.handleAddTodo);
		this.todoList.addEventListener('click', controller.handleDeleteTodo);
		this.todoList.addEventListener('change', controller.handleToggle);
	}
}
/**
*
*@class Controller
*
* Links the view and model class to make the complete systems works
*
**/

class Controller {
	constructor(model, view) {
	
		this.model = model;
		this.view = view;
		
		this.model.bindEvents(this);
		this.view.bindEvents(this);
			
		this.temporaryEditValue;

		this.onTodoListChanged(this.model.todos);
		
	}
	
	onTodoListChanged = todos => {
		this.view.displayTodos(todos);
	}

	handleAddTodo = event => {
		event.preventDefault();
		
		if(this.view.todoText){
			const todo = {
				id:this.model.todos.length > 0 ? this.model.todos[this.model.todos.length - 1].id + 1: 1,
				text:this.view todoText,
				complete:false, 
			}
		}
		this.model.addTodo(todo);
		this.view.resetInput();
	}
	
	handleEditTodoComplete = event => {
		if (this.temporaryEditValue){
	
			const id = parseInt(event.target.parentElement.id);
			this.madel.editTodo(id, this.tamporaryEditValue);
			this.temporaryEditValue = '';
		}
	}

	handleDeleteTodo = event => {
		
		if(event.target.className === 'delete'){
			const id = parseInt(event.target.parentElement.id)

			this.model.deleteTodo(id);

		}
	}
	handleToggle = event => {
		if(event.target.type === 'checkbox'){
			const id = parseInt(event.target.parentElement.id)

			this.model.toggleTodo(id);
		}
	}


}

const app = new Controller(new Model(), new View());
